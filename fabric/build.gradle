plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

def commonProject = project(":common")
fabricApi {
    configureDataGeneration() {
        modId = "territorial"
        outputDirectory = commonProject.file("src/generated/resources")
        client = true
        addToResources = false
        createSourceSet = false
        strictValidation = false
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {url "https://maven.fzzyhmstrs.me/" } // Fzzy Config
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:$fabric_loader_version")

    // Fabric API
    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_api_version+$minecraft_version")
    // Fzzy Config
    modImplementation("me.fzzyhmstrs:fzzy_config:${fzzy_config_version}")

    // Development QOL
    modLocalRuntime("dev.emi:emi-fabric:$emi_version+$minecraft_version")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
    modLocalRuntime("maven.modrinth:sodium:mc$minecraft_version-$sodium_version-fabric")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: inputs.properties.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}