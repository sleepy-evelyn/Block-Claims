plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        url = 'https://maven.neoforged.net/releases'
        content {
            includeGroupAndSubgroups "net.neoforged"
            includeGroupAndSubgroups "cpw.mods"
        }
    }
    maven {url "https://maven.theillusivec4.top" } // Curios
    maven {url "https://thedarkcolour.github.io/KotlinForForge/" } // KotlinForForge
    maven {url "https://maven.dragons.plus/releases" } // Dragons+ & Enchantment Industry
    maven { url "https://mvn.devos.one/snapshots" } // Registrate
    maven { url 'https://maven.fallenbreath.me/releases' } // Conditional Mixin
    maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // NeoForge config api port, needed by ponder
}

dependencies {
    neoForge "net.neoforged:neoforge:$neoforge_version"

    // Fzzy Config
    // TODO - Fzzy config and KotlinForForge have to be manually added to the mod directory for now
    modCompileOnly("me.fzzyhmstrs:fzzy_config:$fzzy_config_version+neoforge")

    // Create Enchantment Industry (Optional)
    modLocalRuntime("plus.dragons.createdragonsplus:create-dragons-plus-${minecraft_version}:${create_dragons_plus_version}")
    modLocalRuntime("plus.dragons.createenchantmentindustry:create-enchantment-industry-${minecraft_version}:${create_enchantment_industry_version}")

    // Amendments
    modLocalRuntime("maven.modrinth:amendments:neoforge_${amendments_version}")
    modLocalRuntime("maven.modrinth:moonlight:${moonlight_lib_version}-neoforge")

    // Development QOL
    modLocalRuntime("dev.emi:emi-neoforge:$emi_version+$minecraft_version")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: inputs.properties.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
